# Sum Time Program
require 'time'
class InvalidTimeError < StandardError
end

class Time
  TIME_PATTERN = /(^([0-1]?\d|2[0-3]?)\:([0-5]?\d)\:([0-5]?\d)$)/
  SECONDS_IN_DAY = 3600 * 24

  def self.calculate_sum(first_time, second_time)
    raise InvalidTimeError unless valid?(first_time) && valid?(second_time)
    Time.parse(first_time).convert_to_seconds +
      Time.parse(second_time).convert_to_seconds
  end

  def self.valid?(time)
    TIME_PATTERN.match(time)
  end

  def convert_to_seconds(time = self)
    time.hour * 3600 + time.min * 60 + time.sec
  end

  def self.day_time_format(total_seconds)
    "#{total_seconds / SECONDS_IN_DAY} day & " +
      Time.at(total_seconds % SECONDS_IN_DAY).utc.strftime('%H:%M:%S')
  end
end

if ARGV.empty?
  puts 'please enter valid input'
else
  begin
    total_seconds = Time.calculate_sum(ARGV[0], ARGV[1])
    puts Time.day_time_format(total_seconds)
  rescue InvalidTimeError
    puts 'Please enter valid time'
  end
end